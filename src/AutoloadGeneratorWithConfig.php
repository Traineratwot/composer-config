<?php

	namespace Traineratwot\cc;


	use Composer\Autoload\AutoloadGenerator;
	use Composer\Composer;
	use Composer\EventDispatcher\EventDispatcher;
	use Composer\IO\IOInterface;
	use Exception;

	class AutoloadGeneratorWithConfig extends AutoloadGenerator
	{

		private string   $configPath = '';
		private Composer $composer;

		public function __construct(Composer $composer, EventDispatcher $eventDispatcher, IOInterface $io = NULL)
		{
			$this->composer = $composer;
			parent::__construct($eventDispatcher, $io);
		}

		/**
		 * @param string $vendorPathToTargetDirCode
		 * @param string $suffix
		 * @return string
		 * @throws Exception
		 */
		protected function getAutoloadFile(string $vendorPathToTargetDirCode, string $suffix)
		{
			$lastChar = $vendorPathToTargetDirCode[strlen($vendorPathToTargetDirCode) - 1];
			if ("'" === $lastChar || '"' === $lastChar) {
				$vendorPathToTargetDirCode = substr($vendorPathToTargetDirCode, 0, -1) . '/autoload_real.php' . $lastChar;
			} else {
				$vendorPathToTargetDirCode .= " . '/autoload_real.php'";
			}
			$config = '';
			if ($this->configPath) {
				$config = "require_once \"" . $this->getConfigPath() . "\";";
			}
			return <<<AUTOLOAD
<?php

// autoload.php @generated by Composer

if (PHP_VERSION_ID < 50600) {
    echo 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
    exit(1);
}



require_once $vendorPathToTargetDirCode;

{$config}


return ComposerAutoloaderInit$suffix::getLoader();

AUTOLOAD;
		}

		/**
		 * @throws Exception
		 */
		public function getConfigPath()
		{
			if ($this->configPath) {
				if (!file_exists($this->configPath)) {
					throw new Exception("File '$config' does not exist");
				}
				if (strpos($this->configPath, '.php') === FALSE) {
					throw new Exception("File '$config' must be a valid PHP file");
				}
			}
			$vendorPath = $this->composer->getConfig()->get('vendor-dir');


			return $this->configPath;
		}

		/**
		 * @throws Exception
		 */
		public function setConfigPath(string $config)
		{
			$this->configPath = $config;
		}
	}